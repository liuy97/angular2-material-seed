{"version":3,"sources":["flexbox/media-query/media-query-adapter.ts"],"names":[],"mappings":"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","file":"media-query-adapter.js","sourcesContent":["import {Directive, Injectable, NgZone} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\n\nimport {BreakPoints} from '../../media-query/break-points';\nimport {MediaQueries, MediaQueryChange} from '../../media-query/media-queries';\n\nimport {MediaQueryActivation} from './media-query-activation';\nimport {MediaQueryChanges, MediaQuerySubscriber} from './media-query-changes';\n\nexport declare type SubscriptionList = Subscription[];\n\nconst ON_DESTROY = 'ngOnDestroy';\nconst ON_MEDIA_CHANGES = 'onMediaQueryChanges';\n\n/**\n *  Adapter between Layout API directives and the MediaQueries mdl service\n *\n *  Using this adapter encapsulates most of the complexity of mql subscriptions\n *  and insures lean integration-code in the Layout directives\n *\n */\n@Injectable()\nexport class MediaQueryAdapter {\n  private _mq: MediaQueries;\n\n  /**\n   *\n   */\n  constructor(private _breakpoints: BreakPoints, zone: NgZone) {\n    this._mq = new MediaQueries(_breakpoints, zone);\n  }\n\n  /**\n   * Create a custom MQ Activation instance for each directive instance; the activation object\n   * tracks the current mq-activated input and manages the calls to the directive's\n   * `onMediaQueryChanges( )`\n   */\n  attach(directive: Directive, property: string, defaultVal: string|number|boolean): MediaQueryActivation {\n    let activation: MediaQueryActivation = new MediaQueryActivation(this._mq, directive, property, defaultVal);\n    let list: SubscriptionList = this._linkOnMediaChanges(directive, property);\n\n    this._listenOnDestroy(directive, list);\n\n    return activation;\n  }\n\n  /**\n   *\n   */\n  private _linkOnMediaChanges(directive: Directive, property: string) {\n    let list: SubscriptionList = [], handler: MediaQuerySubscriber = directive[ON_MEDIA_CHANGES];\n\n    if (handler) {\n      let keys = this._buildRegistryMap(directive, property);\n      list = this._configureChangeObservers(directive,  property, keys, handler);\n    }\n    return list;\n  }\n\n\n  /**\n   *\n   */\n  private _listenOnDestroy(directive: Directive, subscribers: SubscriptionList) {\n    let onDestroyFn = directive[ON_DESTROY];\n    if (onDestroyFn) {\n      directive[ON_DESTROY] = function() {\n        // Unsubscribe all for this directive\n        subscribers.forEach((s: Subscription) => {\n          s.unsubscribe();\n        });\n        onDestroyFn();\n\n        // release array and restore original fn\n        subscribers.length = 0;\n        directive[ON_DESTROY] = onDestroyFn\n      };\n    }\n  }\n\n\n  /**\n   * Build mediaQuery key-hashmap; only for the directive properties that are actually defined\n   */\n  private _buildRegistryMap(directive: Directive, key: string) {\n    return this._breakpoints.registry\n        .map(it => {\n          return {\n            alias: it.alias,      // e.g.  gt-sm, md, gt-lg\n            baseKey : key,        // e.g.  layout, hide, self-align, flex-wrap\n            key: key + it.suffix  // e.g.  layoutGtSm, layoutMd, layoutGtLg\n          }\n        })\n        .filter(it => directive[it.key] != null);\n  }\n  /**\n   * For each API property, register a callback to `onMediaQueryChanges( )`(e:MediaQueryEvent)\n   * Cache 1..n subscriptions for internal auto-unsubscribes during the directive ngOnDestory()\n   * notification\n   */\n  private _configureChangeObservers(\n      directive: Directive, property:string,  keys: any, callback: MediaQuerySubscriber): SubscriptionList {\n    let subscriptions = [];\n\n    keys.forEach(it => {\n      // Only subscribe if the directive API is defined (in use)\n      if (directive[it.key] != null) {\n        let lastEvent: MediaQueryChange,\n            mergeWithLastEvent = (current: MediaQueryChange):\n                MediaQueryChanges => {\n                  let previous = lastEvent;\n                  if (this._isDifferentChange(previous, current)){\n                    lastEvent = current;\n                  } else {\n                    previous = null;\n                  }\n\n                  return new MediaQueryChanges(previous, current);\n                },\n            // Create subscription for mq changes for each alias (e.g. gt-sm, md, etc)\n            subscription = this._mq.observe(it.alias)\n              .map(mergeWithLastEvent)\n              .map((it:MediaQueryChanges) => {\n                // Inject directive default property key name: to let onMediaQueryChange() calls\n                // know which property is being triggered...\n                it.current.property = property;\n                return it;\n              })\n              .subscribe(callback);\n\n        subscriptions.push(subscription);\n      }\n    });\n\n    return subscriptions;\n  }\n\n  /**\n   * Is the current activation event different from the last activation event ?\n   *\n   * !! change events may arrive out-of-order (activate before deactivate)\n   *    so make sure the deactivate is used ONLY when the keys match\n   *    (since a different activate may be in use)\n   *\n   */\n  private _isDifferentChange(previous: MediaQueryChange, current: MediaQueryChange): boolean {\n    let prevAlias = (previous ? previous.mqAlias : '');\n    let sameProperty = current.property === (previous ? previous.property : undefined);\n\n    return current.matches || (!current.matches && (current.mqAlias !== prevAlias) && sameProperty);\n  }\n}\n"]}