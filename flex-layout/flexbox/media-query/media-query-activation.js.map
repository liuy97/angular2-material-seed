{"version":3,"sources":["flexbox/media-query/media-query-activation.ts"],"names":[],"mappings":"OAKO,EAAC,iBAAiB,EAAsB,MAAM,uBAAuB;AAE5E,IAAM,UAAU,GAAG,aAAa,CAAC;AACjC,IAAM,gBAAgB,GAAG,qBAAqB,CAAC;AAE/C;;;;;;;;;;GAUG;AACH;IAwBE;;OAEG;IACH,8BACY,GAAiB,EACjB,UAAqB,EACrB,QAAgB,EAChB,aAAoC;QAHpC,QAAG,GAAH,GAAG,CAAc;QACjB,eAAU,GAAV,UAAU,CAAW;QACrB,aAAQ,GAAR,QAAQ,CAAQ;QAChB,kBAAa,GAAb,aAAa,CAAuB;QAE9C,IAAI,CAAC,wBAAwB,EAAE,CAAC;IAClC,CAAC;IArBD,sBAAI,mDAAiB;QARrB;;;;;;;WAOG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,kBAAkB,IAAI,IAAI,CAAC,QAAQ,CAAC;QAClD,CAAC;;;OAAA;IAKD,sBAAI,gDAAc;QAHlB;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC;QACvE,CAAC;;;OAAA;IAeD;;;OAGG;IACH,kDAAmB,GAAnB,UAAoB,OAA0B;QAC5C,EAAE,CAAC,CAAE,OAAO,CAAC,OAAO,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAS,CAAC,CAAC,CAAC;YAChD,OAAO,GAAG,IAAI,iBAAiB,CAAC,IAAI,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;YACvD,OAAO,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,wBAAwB,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YAEvE,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;YACpC,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;QACrC,CAAC;IACH,CAAC;IAED;;OAEG;IACH,0CAAW,GAAX;QACE,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;QAC7E,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,GAAG,IAAI,CAAC,oBAAoB,CAAC;QAC9D,IAAI,CAAC;YACH,IAAI,CAAC,UAAU,EAAE,CAAC;QAEpB,CAAC;gBAAS,CAAC;YACT,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;YAC5B,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;YAC5B,IAAI,CAAC,oBAAoB,GAAG,SAAS,CAAC;QACxC,CAAC;IACH,CAAC;IAED;;OAEG;IACK,uDAAwB,GAAhC;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YAChC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YACpE,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC5D,CAAC;QAED,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACpF,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC1E,CAAC;IAED;OACG;IACK,oDAAqB,GAA7B,UAA8B,OAA0B;QACtD,IAAI,OAAO,GAAG,OAAO,CAAC,OAAO,EAAE,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;QAE3D,EAAE,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,OAAO,IAAI,EAAE,CAAC;YACnC,OAAO,CAAC,OAAO,GAAG,KAAK,CAAC;QAC1B,EAAE,CAAC,CAAC,QAAQ,IAAI,QAAQ,CAAC,OAAO,IAAI,EAAE,CAAC;YACrC,QAAQ,CAAC,OAAO,GAAG,KAAK,CAAC;QAE3B,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;YACpB,OAAO,CAAC,GAAG,CAAC,eAAa,IAAI,CAAC,QAAQ,SAAI,OAAO,CAAC,OAAO,WAAM,OAAO,CAAC,OAAO,CAAC,KAAK,MAAG,CAAC,CAAC;QAC3F,CAAC;IACH,CAAC;IAED;;;;;;;OAOG;IACK,uDAAwB,GAAhC,UAAiC,OAAwB;QACvD,IAAM,UAAU,GAAG,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,MAAM,CAAC,CAAI,4CAA4C;QAClG,IAAM,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,CAAqB,0BAA0B;QAEhF,MAAM,GAAG,OAAO,CAAC,OAAO,GAAG,UAAU,GAAG,CAAC,CAAC,MAAM,IAAI,UAAU,CAAC,GAAG,IAAI,GAAG,MAAM,CAAC,CAAC;QAEvF,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;QACzD,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC;IAC7B,CAAC;IAED;;;;;OAKG;IACK,gDAAiB,GAAzB,UAA0B,QAAQ;QAAlC,iBAcC;QAbC,IAAI,KAAK,GAAiB,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC;QAClD,IAAI,YAAY,GAAG,UAAC,GAAG,IAAK,OAAA,KAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,SAAS,EAAlC,CAAkC,CAAC;QAE/D,EAAE,CAAC,CAAE,YAAY,CAAE,QAAQ,CAAG,CAAC,CAAC,CAAC;YAC/B,KAAK,CAAC,IAAI,CAAC,UAAA,EAAE;gBACX,IAAI,GAAG,GAAG,KAAI,CAAC,QAAQ,GAAG,EAAE,CAAC,MAAM,CAAC;gBACpC,EAAE,CAAC,CAAE,CAAC,YAAY,CAAC,GAAG,CAAE,CAAC,CAAC,CAAC;oBACzB,QAAQ,GAAG,GAAG,CAAC;oBACf,MAAM,CAAC,IAAI,CAAC;gBACd,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC;QACD,MAAM,CAAC,QAAQ,CAAC;IAClB,CAAC;IAEH,2BAAC;AAAD,CAvIA,AAuIC,IAAA","file":"media-query-activation.js","sourcesContent":["import {Directive, OnDestroy} from '@angular/core';\n\nimport {BreakPoint} from '../../media-query/break-points';\nimport {MediaQueries, MediaQueryChange} from '../../media-query/media-queries';\n\nimport {MediaQueryChanges, OnMediaQueryChanges} from './media-query-changes';\n\nconst ON_DESTROY = 'ngOnDestroy';\nconst ON_MEDIA_CHANGES = 'onMediaQueryChanges';\n\n/**\n * MediaQueryActivation acts as a proxy between the MediaQuery service (which emits mediaQuery changes)\n * and the fx API directives. The MQA proxies (head-hooks) both the `onMediaQueryChanges()` and\n * `ngOnDestroy()` methods of the directive instance.\n *\n * - The MQA also determines which directive property should be used to determine the\n *   current change 'value'... BEFORE the original `onMediaQueryChanges()` method is called.\n * - The `ngOnDestroy()` method is also head-hooked to enable auto-unsubscribe from the MediaQueryServices.\n *\n * NOTE: these interceptions enables the logic in the fx API directives to remain terse and clean.\n */\nexport class MediaQueryActivation implements OnMediaQueryChanges, OnDestroy {\n  private _onDestroy: Function;\n  private _onMediaQueryChanges: Function;\n  private _activatedInputKey: string;\n\n  /**\n   * Determine which directive @Input() property is currently active (for the viewport size):\n   * The key must be defined (in use) or fallback to the 'closest' overlapping property key\n   * that is defined; otherwise the default property key will be used.\n   * e.g.\n   *      if `<div fx-hide fx-hide.gt-sm=\"false\">` is used but the current activated mediaQuery alias\n   *      key is `.md` then `.gt-sm` should be used instead\n   */\n  get activatedInputKey(): string {\n    return this._activatedInputKey || this._baseKey;\n  }\n\n  /**\n   * Get the currently activated @Input value or the fallback default @Input value\n   */\n  get activatedInput(): any {\n    return this._directive[this.activatedInputKey] || this._defaultValue;\n  }\n\n  /**\n   *\n   */\n  constructor(\n      private _mq: MediaQueries,\n      private _directive: Directive,\n      private _baseKey: string,\n      private _defaultValue: string|number|boolean)\n  {\n    this._interceptLifeCyclEvents();\n  }\n\n\n  /**\n   * MediaQueryChanges interceptor that tracks the current mq-activated @Input and calculates the\n   * mq-activated input value or the default value\n   */\n  onMediaQueryChanges(changes: MediaQueryChanges) {\n    if ( changes.current.property == this._baseKey ) {\n      changes = new MediaQueryChanges(null, changes.current);\n      changes.current.value = this._calculateActivatedValue(changes.current);\n\n      this._logMediaQueryChanges(changes);\n      this._onMediaQueryChanges(changes);\n    }\n  }\n\n  /**\n   * Remove interceptors, restore original functions, and forward the onDestroy() call\n   */\n  ngOnDestroy() {\n    this._directive[ON_DESTROY] = this._onDestroy || this._directive[ON_DESTROY];\n    this._directive[ON_MEDIA_CHANGES] = this._onMediaQueryChanges;\n    try {\n      this._onDestroy();\n\n    } finally {\n      this._directive = undefined;\n      this._onDestroy = undefined;\n      this._onMediaQueryChanges = undefined;\n    }\n  }\n\n  /**\n   * Head-hook onDestroy and onMediaQueryChanges methods on the directive instance\n   */\n  private _interceptLifeCyclEvents() {\n    if (this._directive[ON_DESTROY]) {\n      this._onDestroy = this._directive[ON_DESTROY].bind(this._directive);\n      this._directive[ON_DESTROY] = this.ngOnDestroy.bind(this);\n    }\n\n    this._onMediaQueryChanges = this._directive[ON_MEDIA_CHANGES].bind(this._directive);\n    this._directive[ON_MEDIA_CHANGES] = this.onMediaQueryChanges.bind(this);\n  }\n\n  /**\n   */\n  private _logMediaQueryChanges(changes: MediaQueryChanges) {\n    let current = changes.current, previous = changes.previous;\n\n    if (current && current.mqAlias == '')\n      current.mqAlias = 'all';\n    if (previous && previous.mqAlias == '')\n      previous.mqAlias = 'all';\n\n    if (current.matches) {\n      console.log(`mqChange: ${this._baseKey}.${current.mqAlias} = ${changes.current.value};`);\n    }\n  }\n\n  /**\n   *  Map input key associated with mediaQuery activation to closest defined input key\n   *  then return the values associated with the targeted input property\n   *\n   *  !! change events may arrive out-of-order (activate before deactivate)\n   *     so make sure the deactivate is used ONLY when the keys match\n   *     (since a different activate may be in use)\n   */\n  private _calculateActivatedValue(current:MediaQueryChange): any  {\n    const currentKey = this._baseKey + current.suffix;    // e.g. suffix == 'GtSm', _baseKey == 'hide'\n    let   newKey = this._activatedInputKey;                     // e.g. newKey == hideGtSm\n\n          newKey = current.matches ? currentKey : ((newKey == currentKey) ? null : newKey);\n\n    this._activatedInputKey = this._validateInputKey(newKey);\n    return this.activatedInput;\n  }\n\n  /**\n   * For the specified input property key, validate it is defined (used in the markup)\n   * If not see if a overlapping mediaQuery-related input key fallback has been defined\n   *\n   * NOTE: scans in the order defined by activeOverLaps (largest viewport ranges -> smallest ranges)\n   */\n  private _validateInputKey(inputKey) {\n    let items: BreakPoint[] = this._mq.activeOverlaps;\n    let isMissingKey = (key) => this._directive[key] === undefined;\n\n    if ( isMissingKey( inputKey ) ) {\n      items.some(bp => {\n        let key = this._baseKey + bp.suffix;\n        if ( !isMissingKey(key) ) {\n          inputKey = key;\n          return true;\n        }\n      });\n    }\n    return inputKey;\n  }\n\n}\n"]}