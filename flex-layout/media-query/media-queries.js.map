{"version":3,"sources":["media-query/media-queries.ts"],"names":[],"mappings":"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","file":"media-queries.js","sourcesContent":["// RxJS Operators used by the classes...\n\nimport 'rxjs/add/operator/filter';\nimport 'rxjs/add/operator/map';\n\nimport {Injectable, NgZone} from '@angular/core';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {Observable} from 'rxjs/Observable';\n\nimport {BreakPoint, BreakPoints} from './break-points';\nimport {MediaQueryList, MediaQueryListFactory} from './media-query-factory';\n\n// ****************************************************************\n// Exported Types and Interfaces\n// ****************************************************************\n\n/**\n * Class instances emitted [to observers] for each mql notification\n */\nexport class MediaQueryChange {\n  constructor(\n      public matches: boolean,     // Is the mq currently activated\n      public mqAlias: string,      // e.g.   gt-sm, md, gt-lg\n      public suffix: string = '',  // e.g.   GtSM, Md, GtLg\n      public mediaQuery:string = \"all\",    // e.g.   screen and (min-width: 600px) and (max-width: 959px)\n      public value: string = '',    // @Input value associated for the current mq\n      public property: string = undefined     // base property associated with the change\n      ) {}\n}\n\n// ****************************************************************\n// ****************************************************************\n\n\n@Injectable()\nexport class MediaQueries {\n  private _mqls: any = {};\n  private _breakpoints: BreakPoints;\n  private _source: BehaviorSubject<MediaQueryChange>;\n  private _announcer: Observable<MediaQueryChange>;\n\n  /**\n   * Constructor\n   */\n  constructor(breakpoints: BreakPoints, private _zone: NgZone = null) {\n    this._breakpoints = breakpoints;\n    this._source = new BehaviorSubject<MediaQueryChange>(new MediaQueryChange(true, ''));\n    this._announcer = this._source.asObservable();\n\n    this.prepareWatchers(breakpoints.registry);\n  }\n\n  /**\n   * Read-only accessor to the list of breakpoints configured in the BreakPoints provider\n   */\n  get breakpoints(): BreakPoint[] {\n    return [...this._breakpoints.registry];\n  }\n\n  get activeOverlaps(): BreakPoint[] {\n    let items: BreakPoint[] = this._breakpoints.overlappings.reverse();\n    return items.filter((bp: BreakPoint) => {\n      return this._mqls[bp.mediaQuery].matches;\n    })\n  }\n\n  get active(): BreakPoint {\n    let found = null, items = this.breakpoints.reverse();\n    items.forEach(bp => {\n      if (bp.alias !== '') {\n        let mql = this._mqls[bp.mediaQuery];\n        if (mql.matches && !found)\n          found = bp;\n      }\n    });\n\n    let first = this.breakpoints[0];\n    return found || (this._mqls[first.mediaQuery].matches ? first : null);\n  }\n\n  /**\n   * For the specified mediaQuery alias, is the mediaQuery range active?\n   */\n  isActive(alias: string): boolean {\n    let bp = this._breakpoints.findByAlias(alias);\n    if (bp) {\n      let mql = this._mqls[bp.mediaQuery];\n      if (mql.matches)\n        return true;\n    }\n    return false;\n  }\n\n  /**\n   * External observers can watch for all (or a specific) mql changes.\n   * Typically used by the MediaQueryAdaptor; optionally available to components\n   * use the MediaQueries as $mdMedia service\n   */\n  observe(alias?: string): Observable<MediaQueryChange> {\n    return this._announcer.filter(e => {\n      return !alias ? (e.matches === true) : (e.mqAlias === alias);\n    });\n  }\n\n  /**\n   * Based on the BreakPoints provider, register internal listeners for the specified ranges\n   */\n  private prepareWatchers(ranges: BreakPoint[]) {\n\n    ranges.forEach((it: BreakPoint) => {\n      let mql = this._mqls[it.mediaQuery];\n      if (!mql) {\n        mql = MediaQueryListFactory.instanceOf((it.mediaQuery));\n\n        // Each listener uses a shared eventHandler: which emits specific data to observers\n        // Cache this permanent listener\n\n        mql.addListener(this.onMQLEvent.bind(this, it));\n        this._mqls[it.mediaQuery] = mql;\n\n        if (mql.matches) {\n          // Announce activate range for initial subscribers\n          this.onMQLEvent(it, mql);\n        }\n      }\n    });\n  }\n\n  /**\n   * On each mlq event, emit a special MediaQueryChange to all subscribers\n   */\n  private onMQLEvent(breakpoint: BreakPoint, mql: MediaQueryList) {\n    let fn = this._zone ? this._zone.run : (callback) => { callback();};\n\n    // Execute within ng2 zone from change detection, etc.\n    fn(() => {\n      // console.log(`mq[ ${breakpoint.alias} ]: active = ${mql.matches}, mediaQuery = ${breakpoint.mediaQuery} `);\n      let change = new MediaQueryChange(mql.matches, breakpoint.alias, breakpoint.suffix, breakpoint.mediaQuery);\n      this._source.next( change );\n    })\n  }\n}\n"]}