{"version":3,"sources":["media-query/media-query-factory.ts"],"names":[],"mappings":"AAAA,mEAAmE;AACnE,gCAAgC;AAChC,mEAAmE;AAoBnE,mEAAmE;AACnE,mEAAmE;AAEnE;;;GAGG;AACH,IAAM,UAAU,GAAG,EAAE,CAAC;AAEtB;;;GAGG;AACH;IAAA;IAiBA,CAAC;IAhBC;;;OAGG;IACI,gCAAU,GAAjB,UAAkB,KAAa;QAC7B,IAAI,SAAS,GAAG,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,WAAW,CAAC;QAEvD,OAAO,CAAC,KAAK,CAAC,CAAC;QAEf,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,GAAmB;YAC5D,OAAO,EAAE,KAAK,KAAK,KAAK,IAAI,KAAK,KAAK,EAAE;YACxC,KAAK,EAAE,KAAK;YACZ,WAAW,EAAE,cAAO,CAAC;YACrB,cAAc,EAAE,cAAO,CAAC;SACzB,CAAC;IACJ,CAAC;IACH,4BAAC;AAAD,CAjBA,AAiBC,IAAA;AAGD;;;;;;GAMG;AACH,iBAAiB,KAAK;IACpB,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACvB,IAAI,CAAC;YACH,IAAI,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YAE5C,KAAK,CAAC,YAAY,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;YACvC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;gBACzB,IAAI,OAAO,GAAG,YAAU,KAAK,0BAAuB,CAAC;gBACrD,KAAK,CAAC,WAAW,CAAC,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC;YACtD,CAAC;YAED,QAAQ,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YAE5D,mCAAmC;YACnC,UAAU,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;QAE5B,CAAE;QAAA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACX,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACnB,CAAC;IACH,CAAC;AACH,CAAC","file":"media-query-factory.js","sourcesContent":["// ****************************************************************\n// Exported Types and Interfaces\n// ****************************************************************\n\n/**\n * EventHandler callback with the mediaQuery [range] activates or deactivates\n */\nexport interface MediaQueryListListener {\n  // Function with Window's MediaQueryList argument\n  (mql: MediaQueryList): void;\n}\n\n/**\n * EventDispatcher for a specific mediaQuery [range]\n */\nexport interface MediaQueryList {\n  readonly matches: boolean;\n  readonly media: string;\n  addListener(listener: MediaQueryListListener): void;\n  removeListener(listener: MediaQueryListListener): void;\n}\n\n// ****************************************************************\n// ****************************************************************\n\n/**\n * Private global registry for all dynamically-created, injected style tags\n * @see prepare(query)\n */\nconst ALL_STYLES = {};\n\n/**\n * Factory class used to quickly create a mq listener for a specified mediaQuery range\n * No need to implement polyfill\n */\nexport class MediaQueryListFactory {\n  /**\n   * Return a MediaQueryList for the specified media query\n   * Publish a mockMQL if needed\n   */\n  static instanceOf(query: string): MediaQueryList {\n    let canListen = !!window.matchMedia('all').addListener;\n\n    prepare(query);\n\n    return canListen ? window.matchMedia(query) : <MediaQueryList>{\n      matches: query === 'all' || query === '',\n      media: query,\n      addListener: () => {},\n      removeListener: () => {}\n    };\n  }\n}\n\n\n/**\n * For Webkit engines that only trigger the MediaQueryListListener\n * when there is at least one CSS selector for the respective media query.\n *\n * @param query string The mediaQuery used to create a faux CSS selector\n *\n */\nfunction prepare(query) {\n  if (!ALL_STYLES[query]) {\n    try {\n      let style = document.createElement('style');\n\n      style.setAttribute('type', 'text/css');\n      if (!style['styleSheet']) {\n        let cssText = `@media ${query} {.ngl-query-test{ }}`;\n        style.appendChild(document.createTextNode(cssText));\n      }\n\n      document.getElementsByTagName('head')[0].appendChild(style);\n\n      // Store in private global registry\n      ALL_STYLES[query] = style;\n\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\n"]}