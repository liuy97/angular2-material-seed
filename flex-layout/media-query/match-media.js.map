{"version":3,"sources":["media-query/match-media.ts"],"names":[],"mappings":"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","file":"match-media.js","sourcesContent":["import {OpaqueToken} from '@angular/core';\nimport {Injectable, NgZone} from '@angular/core';\n\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {Observable} from 'rxjs/Observable';\n\n// RxJS Operators used by the classes...\nimport 'rxjs/add/operator/filter';\nimport 'rxjs/add/operator/map';\n\nimport {MediaChange} from './media-change';\n\n/**\n * @internal\n * EventHandler callback with the mediaQuery [range] activates or deactivates\n */\nexport interface MediaQueryListListener {\n  // Function with Window's MediaQueryList argument\n  (mql: MediaQueryList): void;\n}\n\n/**\n * @internal\n * EventDispatcher for a specific mediaQuery [range]\n */\nexport interface MediaQueryList {\n  readonly matches: boolean;\n  readonly media: string;\n  addListener(listener: MediaQueryListListener): void;\n  removeListener(listener: MediaQueryListListener): void;\n}\n\n/**\n *  Opaque Token unique to the flex-layout library.\n *  Note: Developers must use this token when building their own custom `MatchMediaObservableProvider`\n *  provider.\n *\n *  @see ./providers/match-media-observable-provider.ts\n */\nexport const MatchMediaObservable: OpaqueToken = new OpaqueToken('fx-observable-media-query');\n\n\n/**\n * MediaMonitor configures listeners to mediaQuery changes and publishes an Observable facade to convert\n * mediaQuery change callbacks to subscriber notifications. These notifications will be performed within the\n * ng Zone to trigger change detections and component updates.\n *\n * NOTE: both mediaQuery activations and de-activations are announced in notifications\n */\n@Injectable()\nexport class MatchMedia {\n  protected _registry: Map<string, MediaQueryList>;\n  protected _source: BehaviorSubject<MediaChange>;\n  protected _observable$: Observable<MediaChange>;\n\n  constructor(protected _zone: NgZone) {\n    this._registry = new Map<string, MediaQueryList>( );\n    this._source = new BehaviorSubject<MediaChange>(new MediaChange(true));\n    this._observable$ = this._source.asObservable();\n  }\n\n  /**\n   * For the specified mediaQuery?\n   */\n  isActive(mediaQuery: string): boolean {\n    if ( this._registry.has(mediaQuery) ) {\n      let mql = this._registry.get(mediaQuery);\n      return  mql.matches;\n    }\n    return false;\n  }\n\n  /**\n   * External observers can watch for all (or a specific) mql changes.\n   * Typically used by the MediaQueryAdaptor; optionally available to components\n   * who wish to use the MediaMonitor as mediaMonitor$ observable service.\n   *\n   * NOTE: if a mediaQuery is not specified, then ALL mediaQuery activations will\n   *       be announced.\n   */\n  observe(mediaQuery?: string): Observable<MediaChange> {\n    this.registerQuery(mediaQuery);\n\n    return this._observable$.filter((change: MediaChange) => {\n      return mediaQuery ? (change.mediaQuery === mediaQuery) : true;\n    });\n  }\n\n  /**\n   * Based on the BreakPointRegistry provider, register internal listeners for each unique mediaQuery\n   * Each listener emits specific MediaChange data to observers\n   */\n  registerQuery(mediaQuery: string) {\n    if ( mediaQuery ) {\n      let mql = this._registry.get(mediaQuery);\n      let onMQLEvent = (mql: MediaQueryList) => {\n        this._zone.run(() => {\n          let change = new MediaChange(mql.matches, mediaQuery);\n          this._source.next(change);\n        });\n      };\n\n      if (!mql) {\n        mql = this._buildMQL(mediaQuery);\n        mql.addListener(onMQLEvent);\n        this._registry.set(mediaQuery, mql);\n      }\n\n      if (mql.matches) {\n        onMQLEvent(mql);  // Announce activate range for initial subscribers\n      }\n    }\n\n  }\n\n  /**\n   * Call window.matchMedia() to build a MediaQueryList; which\n   * supports 0..n listeners for activation/deactivation\n   */\n  protected  _buildMQL(query: string): MediaQueryList {\n    prepareQueryCSS(query);\n\n    let canListen = !!(<any>window).matchMedia('all').addListener;\n    return canListen ? (<any>window).matchMedia(query) : <MediaQueryList>{\n      matches: query === 'all' || query === '',\n      media: query,\n      addListener: () => { },\n      removeListener: () => { }\n    };\n  }\n\n}\n\n/**\n * Private global registry for all dynamically-created, injected style tags\n * @see prepare(query)\n */\nconst ALL_STYLES = {};\n\n/**\n * For Webkit engines that only trigger the MediaQueryListListener\n * when there is at least one CSS selector for the respective media query.\n *\n * @param query string The mediaQuery used to create a faux CSS selector\n *\n */\nfunction prepareQueryCSS(query) {\n  if (!ALL_STYLES[query]) {\n    try {\n      let style = document.createElement('style');\n\n      style.setAttribute('type', 'text/css');\n      if (!style['styleSheet']) {\n        let cssText = `@media ${query} {.fx-query-test{ }}`;\n        style.appendChild(document.createTextNode(cssText));\n      }\n\n      document.getElementsByTagName('head')[0].appendChild(style);\n\n      // Store in private global registry\n      ALL_STYLES[query] = style;\n\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\n\n"]}