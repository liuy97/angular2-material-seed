{"version":3,"sources":["media-query/mock/mock-match-media.ts"],"names":[],"mappings":"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","file":"mock-match-media.js","sourcesContent":["import {Injectable, NgZone} from '@angular/core';\nimport {MatchMedia} from '../match-media';\nimport {BreakPointRegistry} from '../breakpoints/break-point-registry';\n\n/**\n * MockMatchMedia mocks calls to the Window API matchMedia with a build of a simulated\n * MockMediaQueryListener. Methods are available to simulate an activation of a mediaQuery\n * range and to clearAll mediaQuery listeners.\n */\n@Injectable()\nexport class MockMatchMedia extends MatchMedia {\n\n  constructor(_zone:NgZone, private _breakpoints:BreakPointRegistry ){\n    super(_zone);\n    this._actives = [ ];\n  }\n\n  /**\n   * Easy method to clear all listeners for all mediaQueries\n   */\n  clearAll() {\n    this._registry.forEach((mql:MockMediaQueryList, mediaQuery:string) => {\n      mql.destroy();\n    });\n    this._registry.clear();\n  }\n\n  /**\n   * Feature to support manual, simulated activation of a mediaQuery.\n   */\n  activate(mediaQuery:string, useOverlaps:boolean = false):boolean {\n    mediaQuery = this._validateQuery(mediaQuery);\n\n    if ( !this.isActive(mediaQuery) ) {\n      this._deactivateAll();\n\n      this._registerMediaQuery(mediaQuery);\n      this._activateWithOverlaps(mediaQuery, useOverlaps);\n    }\n\n    return this.hasActivated;\n  }\n\n  /**\n   * Converts an optional mediaQuery alias to a specific, valid mediaQuery\n   */\n  _validateQuery( queryOrAlias ) {\n    let bp = this._breakpoints.findByAlias( queryOrAlias );\n    if ( bp ) {\n      queryOrAlias = bp.mediaQuery;\n    }\n    return queryOrAlias;\n  }\n\n  /**\n   * Manually activate any overlapping mediaQueries to simulate\n   * similar functionality in the window.matchMedia()\n   *\n   *   \"md\"    active == true\n   *   \"gt-sm\" active == true\n   *   \"sm\"    active == false\n   *   \"gt-xs\" active == true\n   *   \"xs\"    active == false\n   *\n   */\n  private _activateWithOverlaps(mediaQuery:string, useOverlaps:boolean) {\n    if ( useOverlaps) {\n      let bp  = this._breakpoints.findByQuery(mediaQuery);\n      switch( bp ? bp.alias : 'unknown') {\n        case 'xl'   :   this._activateByAlias('gt-lg');   // note the fall-thrus\n        case 'gt-lg':\n        case 'lg'   :   this._activateByAlias('gt-md');\n        case 'gt-md':\n        case 'md'   :   this._activateByAlias('gt-sm');\n        case 'gt-sm':\n        case 'sm'   :   this._activateByAlias('gt-xs');   break;\n        default     :                                     break;\n      }\n    }\n    // Activate last since the responsiveActivation is watching *this* mediaQuery\n    this._activateByQuery( mediaQuery );\n  }\n\n  /**\n   *\n   */\n  private _activateByAlias( alias ) {\n    let bp = this._breakpoints.findByAlias(alias);\n    if ( bp ) {\n      alias = bp.mediaQuery;\n    }\n    this._activateByQuery( alias );\n  }\n\n  /**\n   *\n   */\n  private _activateByQuery(mediaQuery) {\n    let mql = <MockMediaQueryList> this._registry.get(mediaQuery);\n    if ( mql ) {\n      this._actives.push( mql.activate() );\n    }\n    return this.hasActivated;\n  }\n\n  /**\n   * Deactivate all current Mock MQLs\n   */\n  private _deactivateAll() {\n    if ( this._actives.length ) {\n      // Deactivate all current MQLs and reset the buffer\n      this._actives.map( it => it.deactivate() );\n      this._actives = [ ];\n    }\n    return this;\n  }\n\n  /**\n   * Insure the mediaQuery is registered with MatchMedia\n   */\n  private _registerMediaQuery(mediaQuery) {\n    if ( !this._registry.has(mediaQuery) ) {\n      this.registerQuery(mediaQuery);\n    }\n  }\n\n  /**\n   * Call window.matchMedia() to build a MediaQueryList; which\n   * supports 0..n listeners for activation/deactivation\n   */\n  protected _buildMQL(query: string): MediaQueryList {\n    return new MockMediaQueryList(query);\n  }\n\n  protected get hasActivated() {\n    return (this._actives.length > 0)\n  }\n\n  private _actives : MockMediaQueryList[] = [ ];\n}\n\n/**\n * Special internal class to simulate a MediaQueryList and\n * - supports manual activation to simulate mediaQuery matching\n * - manages listeners\n */\nexport class MockMediaQueryList implements MediaQueryList {\n  private _isActive : boolean = false;\n  private _listeners : Array<MediaQueryListListener> = [ ];\n\n  get matches() : boolean { return this._isActive; }\n  get media() : string { return this._mediaQuery; }\n\n  constructor(private _mediaQuery:string) { }\n\n  /**\n   *\n   */\n  destroy() {\n    this.deactivate();\n    this._listeners = [ ];\n  }\n\n  /**\n   * Notify all listeners that 'matches === TRUE'\n   */\n  activate():MockMediaQueryList {\n    this._isActive = true;\n    this._listeners.forEach((callback) => {\n      callback(this);\n    });\n\n    return this;\n  }\n\n  /**\n   * Notify all listeners that 'matches === false'\n   */\n  deactivate():MockMediaQueryList {\n    if ( this._isActive ) {\n      this._isActive = false;\n      this._listeners.forEach((callback) => {\n        callback(this);\n      });\n    }\n    return this;\n  }\n\n  /**\n   *\n   */\n  addListener(listener: MediaQueryListListener) {\n    if ( this._listeners.indexOf(listener) === -1 ) {\n      this._listeners.push(listener);\n    }\n    if ( this._isActive ) listener(this);\n  }\n\n  removeListener(listener: MediaQueryListListener) {  }\n}\n\n\n\n"]}