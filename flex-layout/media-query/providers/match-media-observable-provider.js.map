{"version":3,"sources":["media-query/providers/match-media-observable-provider.ts"],"names":[],"mappings":"OAGO,uBAAuB;OACvB,0BAA0B;OAE1B,EAAC,kBAAkB,EAAC,MAAM,qCAAqC;OAG/D,EAAC,UAAU,EAAE,oBAAoB,EAAC,MAAM,gBAAgB;OACxD,EAAC,UAAU,EAAC,MAAM,uBAAuB;AAIhD;;;;;;GAMG;AACH,+CAA+C,YAAwB,EAAE,WAA+B;IACpG,IAAI,eAAe,GAAG,UAAS,MAAoB,IAAI,MAAM,CAAC,MAAM,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC;IACzF,IAAI,cAAc,GAAG,UAAS,UAAiB,IAAe,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5G,IAAI,WAAW,GAAG,UAAS,MAAoB,IAAI,MAAM,CAAC,UAAU,CAAC,MAAM,EAAE,cAAc,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAEnH,gGAAgG;IAChG,oDAAoD;IACpD,MAAM,CAAC,YAAY,CAAC,OAAO,EAAG,CAAC,MAAM,CAAE,eAAe,CAAE,CAAC,GAAG,CAAE,WAAW,CAAE,CAAC;AAChF,CAAC;AAAA,CAAC;AAEF;;;GAGG;AACH,OAAO,IAAM,4BAA4B,GAAG;IAC1C,OAAO,EAAE,oBAAoB;IAC7B,IAAI,EAAE,CAAC,UAAU,EAAE,kBAAkB,CAAC;IACtC,UAAU,EAAE,8BAA8B;CAC3C,CAAC","file":"match-media-observable-provider.js","sourcesContent":["import {OpaqueToken} from '@angular/core';\n\nimport {Observable} from \"rxjs/Observable\";\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/filter';\n\nimport {BreakPointRegistry} from '../breakpoints/break-point-registry';\n\nimport {MediaChange} from '../media-change';\nimport {MatchMedia, MatchMediaObservable} from '../match-media';\nimport {mergeAlias} from '../../utils/add-alias';\nimport {BreakPoint} from '../breakpoints/break-point';\n\n\n/**\n * This factory uses the BreakPoint Registry only to inject alias information into the raw MediaChange\n * notification. For custom mediaQuery notifications, alias information will not be injected and those\n * fields will be ''.\n *\n * !! Only activation mediaChange notifications are publised by the MatchMediaObservable\n */\nexport function instanceOfMatchMediaObservable(mediaWatcher: MatchMedia, breakpoints: BreakPointRegistry) {\n    let onlyActivations = function(change : MediaChange) { return change.matches === true; };\n    let findBreakpoint = function(mediaQuery:string):BreakPoint { return breakpoints.findByQuery(mediaQuery); };\n    let injectAlias = function(change : MediaChange) { return mergeAlias(change, findBreakpoint(change.mediaQuery)); };\n\n    // Note: the raw MediaChange events [from MatchMedia] do not contain important alias information\n    //       these must be injected into the MediaChange\n    return mediaWatcher.observe( ).filter( onlyActivations ).map( injectAlias );\n};\n\n/**\n *  Provider to return observable to ALL MediaQuery events\n *  Developers should build custom providers to override this default MediaQuery Observable\n */\nexport const MatchMediaObservableProvider = {\n  provide: MatchMediaObservable,\n  deps: [MatchMedia, BreakPointRegistry],\n  useFactory: instanceOfMatchMediaObservable\n};\n"]}