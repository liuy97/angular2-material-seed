{"version":3,"sources":["media-query/providers/match-media-provider.ts"],"names":[],"mappings":"OAAO,EAAC,WAAW,EAAC,MAAM,eAAe;OAGlC,uBAAuB;OACvB,0BAA0B;OAG1B,EAAC,kBAAkB,EAAC,MAAM,qCAAqC;OAG/D,EAAC,UAAU,EAAC,MAAM,gBAAgB;OAClC,EAAC,UAAU,EAAC,MAAM,uBAAuB;AAEhD;;;;GAIG;AACH,OAAO,IAAM,MAAM,GAAgB,IAAI,WAAW,CAAC,2BAA2B,CAAC,CAAC;AAEhF;;;GAGG;AACH,OAAO,IAAM,4BAA4B,GAAG;IAC1C,OAAO,EAAE,MAAM;IACf,IAAI,EAAE,CAAC,UAAU,EAAE,kBAAkB,CAAC;IACtC,UAAU,EAAE,UAAC,YAAwB,EAAE,WAA+B;QACpE,IAAI,eAAe,GAAG,UAAC,MAAoB,IAAK,OAAA,CAAC,MAAM,CAAC,OAAO,KAAK,IAAI,CAAC,EAAzB,CAAyB,CAAC;QAC1E,IAAI,cAAc,GAAG,UAAC,UAAiB,IAAK,OAAA,WAAW,CAAC,WAAW,CAAC,UAAU,CAAC,EAAnC,CAAmC,CAAC;QAChF,IAAI,WAAW,GAAG,UAAC,MAAoB,IAAK,OAAA,UAAU,CAAC,MAAM,EAAE,cAAc,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,EAArD,CAAqD,CAAC;QAElG,gGAAgG;QAChG,oDAAoD;QACpD,MAAM,CAAC,YAAY,CAAC,OAAO,EAAG,CAAC,MAAM,CAAE,eAAe,CAAE,CAAC,GAAG,CAAE,WAAW,CAAE,CAAA;IAC7E,CAAC;CACF,CAAC","file":"match-media-provider.js","sourcesContent":["import {OpaqueToken} from '@angular/core';\n\nimport {Observable} from \"rxjs/Observable\";\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/filter';\n\nimport {BreakPoint} from '../breakpoints/break-point';\nimport {BreakPointRegistry} from '../breakpoints/break-point-registry';\n\nimport {MediaChange} from '../media-change';\nimport {MatchMedia} from '../match-media';\nimport {mergeAlias} from '../../utils/add-alias';\n\n/**\n *  Opaque Token unique to the flex-layout library.\n *  Note: Developers must use this token when building their own custom `MatchMediaObservableProvider`\n *  provider (see below).\n */\nexport const Media$: OpaqueToken = new OpaqueToken('fx-observable-media-query');\n\n/**\n *  Provider to return observable to ALL MediaQuery events\n *  Developers should build custom providers to override this default MediaQuery Observable\n */\nexport const MatchMediaObservableProvider = {\n  provide: Media$,\n  deps: [MatchMedia, BreakPointRegistry],\n  useFactory: (mediaWatcher: MatchMedia, breakpoints: BreakPointRegistry) => {\n    let onlyActivations = (change : MediaChange) => (change.matches === true);\n    let findBreakpoint = (mediaQuery:string) => breakpoints.findByQuery(mediaQuery);\n    let injectAlias = (change : MediaChange) => mergeAlias(change, findBreakpoint(change.mediaQuery));\n\n    // Note: the raw MediaChange events [from MatchMedia] do not contain important alias information\n    //       these must be injected into the MediaChange\n    return mediaWatcher.observe( ).filter( onlyActivations ).map( injectAlias )\n  }\n};\n"]}