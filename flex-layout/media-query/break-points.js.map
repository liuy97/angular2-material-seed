{"version":3,"sources":["media-query/break-points.ts"],"names":[],"mappings":";;;;;;;;;OAAO,EAAC,UAAU,EAAC,MAAM,eAAe;AASxC;;;;GAIG;AAEH;IAGE;;OAEG;IACH;QACE,IAAI,CAAC,QAAQ,GAAG;YACd,EAAC,KAAK,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,WAAW,EAAE,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAC;YAChE,EAAC,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,WAAW,EAAE,KAAK,EAAE,UAAU,EAAE,+BAA+B,EAAC;YAC5F;gBACE,KAAK,EAAE,OAAO;gBACd,MAAM,EAAE,MAAM;gBACd,WAAW,EAAE,IAAI;gBACjB,UAAU,EAAE,+BAA+B;aAC5C;YACD;gBACE,KAAK,EAAE,IAAI;gBACX,MAAM,EAAE,IAAI;gBACZ,WAAW,EAAE,KAAK;gBAClB,UAAU,EAAE,sDAAsD;aACnE;YACD;gBACE,KAAK,EAAE,OAAO;gBACd,MAAM,EAAE,MAAM;gBACd,WAAW,EAAE,IAAI;gBACjB,UAAU,EAAE,+BAA+B;aAC5C;YACD;gBACE,KAAK,EAAE,IAAI;gBACX,MAAM,EAAE,IAAI;gBACZ,WAAW,EAAE,KAAK;gBAClB,UAAU,EAAE,uDAAuD;aACpE;YACD;gBACE,KAAK,EAAE,OAAO;gBACd,MAAM,EAAE,MAAM;gBACd,WAAW,EAAE,IAAI;gBACjB,UAAU,EAAE,gCAAgC;aAC7C;YACD;gBACE,KAAK,EAAE,IAAI;gBACX,MAAM,EAAE,IAAI;gBACZ,WAAW,EAAE,KAAK;gBAClB,UAAU,EAAE,wDAAwD;aACrE;YACD;gBACE,KAAK,EAAE,OAAO;gBACd,MAAM,EAAE,MAAM;gBACd,WAAW,EAAE,IAAI;gBACjB,UAAU,EAAE,gCAAgC;aAC7C;YACD;gBACE,KAAK,EAAE,IAAI;gBACX,MAAM,EAAE,IAAI;gBACZ,WAAW,EAAE,KAAK;gBAClB,UAAU,EAAE,gCAAgC;aAC7C;SACF,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,iCAAW,GAAX,UAAY,KAAa;QACvB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAE,UAAA,EAAE,IAAI,OAAA,EAAE,CAAC,KAAK,IAAI,KAAK,EAAjB,CAAiB,CAAC,CAAC;IACtD,CAAC;IAED,iCAAW,GAAX,UAAY,KAAY;QACtB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAE,UAAA,EAAE,IAAI,OAAA,EAAE,CAAC,UAAU,IAAI,KAAK,EAAtB,CAAsB,CAAC,CAAC;IAC3D,CAAC;IAMD,sBAAI,qCAAY;QAJhB;;;WAGG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAA,EAAE,IAAI,OAAA,EAAE,CAAC,WAAW,IAAI,IAAI,EAAtB,CAAsB,CAAC,CAAC;QAC5D,CAAC;;;OAAA;IAKD,sBAAI,gCAAO;QAHX;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAA,EAAE,IAAI,OAAA,EAAE,CAAC,KAAK,EAAR,CAAQ,CAAC,CAAC;QAC3C,CAAC;;;OAAA;IAKD,sBAAI,iCAAQ;QAHZ;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAA,EAAE,IAAI,OAAA,EAAE,CAAC,MAAM,EAAT,CAAS,CAAC,CAAC;QAC5C,CAAC;;;OAAA;IA7FH;QAAC,UAAU,EAAE;;mBAAA;IA8Fb,kBAAC;AAAD,CA7FA,AA6FC,IAAA","file":"break-points.js","sourcesContent":["import {Injectable} from '@angular/core';\n\nexport interface BreakPoint {\n  mediaQuery: string;\n  overlapping: boolean;\n  suffix: string;\n  alias: string;\n}\n\n/**\n * Registry of 1..n MediaQuery breakpoint ranges\n * This is published as a provider and may be overriden from custom, application-specific ranges\n *\n */\n@Injectable()\nexport class BreakPoints {\n  public registry: BreakPoint[];\n\n  /**\n   *\n   */\n  constructor() {\n    this.registry = [\n      {alias: '', suffix: '', overlapping: true, mediaQuery: 'screen'},\n      {alias: 'xs', suffix: 'Xs', overlapping: false, mediaQuery: 'screen and (max-width: 599px)'},\n      {\n        alias: 'gt-xs',\n        suffix: 'GtXs',\n        overlapping: true,\n        mediaQuery: 'screen and (min-width: 600px)'\n      },\n      {\n        alias: 'sm',\n        suffix: 'Sm',\n        overlapping: false,\n        mediaQuery: 'screen and (min-width: 600px) and (max-width: 959px)'\n      },\n      {\n        alias: 'gt-sm',\n        suffix: 'GtSm',\n        overlapping: true,\n        mediaQuery: 'screen and (min-width: 960px)'\n      },\n      {\n        alias: 'md',\n        suffix: 'Md',\n        overlapping: false,\n        mediaQuery: 'screen and (min-width: 960px) and (max-width: 1279px)'\n      },\n      {\n        alias: 'gt-md',\n        suffix: 'GtMd',\n        overlapping: true,\n        mediaQuery: 'screen and (min-width: 1280px)'\n      },\n      {\n        alias: 'lg',\n        suffix: 'Lg',\n        overlapping: false,\n        mediaQuery: 'screen and (min-width: 1280px) and (max-width: 1919px)'\n      },\n      {\n        alias: 'gt-lg',\n        suffix: 'GtLg',\n        overlapping: true,\n        mediaQuery: 'screen and (min-width: 1920px)'\n      },\n      {\n        alias: 'xl',\n        suffix: 'Xl',\n        overlapping: false,\n        mediaQuery: 'screen and (min-width: 1920px)'\n      }\n    ];\n  }\n\n  /**\n   * Search breakpoints by alias (e.g. gt-xs)\n   */\n  findByAlias(alias: string): BreakPoint {\n    return this.registry.find( bp => bp.alias == alias);\n  }\n\n  findByQuery(query:string) : BreakPoint {\n    return this.registry.find( bp => bp.mediaQuery == query);\n  }\n\n  /**\n   * Get all the breakpoints whose ranges could overlapping `normal` ranges;\n   * e.g. gt-sm overlaps md, lg, and xl\n   */\n  get overlappings(): BreakPoint[] {\n    return this.registry.filter(it => it.overlapping == true);\n  }\n\n  /**\n   * Get list of all registered (non-empty) breakpoint aliases\n   */\n  get aliases(): string[] {\n    return this.registry.map(it => it.alias);\n  }\n\n  /**\n   *\n   */\n  get suffixes(): string[] {\n    return this.registry.map(it => it.suffix);\n  }\n}\n"]}